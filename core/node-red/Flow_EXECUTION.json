[
    {
        "id": "1c01547a0468f5c0",
        "type": "tab",
        "label": "EXECUTION",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "37478c959577533d",
        "type": "debug",
        "z": "1c01547a0468f5c0",
        "name": "MQTT server/log",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 280,
        "wires": []
    },
    {
        "id": "9d2ebf10aaaf18bd",
        "type": "ui_button",
        "z": "1c01547a0468f5c0",
        "name": "Launch Record Multi Thread",
        "group": "bbd3e3f3bc9b",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Launch Record X Threads",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "start",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "c7142bda3aaaafe4"
            ]
        ]
    },
    {
        "id": "c7142bda3aaaafe4",
        "type": "function",
        "z": "1c01547a0468f5c0",
        "name": "X THread / Config file selected",
        "func": "var selectedFiles = global.get('fileListSelected') || [];\nvar dirConf = global.get('dirConf');\n\nvar pipelinesStates = Array(6).fill(null);  // Tableau avec 6 éléments vides\nflow.set('pipelinesStates', pipelinesStates);\n\nnode.warn(dirConf);\n\nif (selectedFiles.length === 0) {\n    node.warn(\"Aucun fichier sélectionné.\");\n    return null;\n}\n\nvar threads = selectedFiles.map(file => {\n    return {\n        topic: \"start_thread\",\n        payload: dirConf + file\n    };\n});\n\nreturn [threads];",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 60,
        "wires": [
            [
                "d99c529bf5d3da2f"
            ]
        ]
    },
    {
        "id": "d99c529bf5d3da2f",
        "type": "exec",
        "z": "1c01547a0468f5c0",
        "command": "python3 /home/bibi/code/ECHO-PROJECT/core/pControler-from-JSON.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Exécuter le thread",
        "x": 730,
        "y": 60,
        "wires": [
            [
                "de563346f705b37f"
            ],
            [],
            [
                "8202072c5c42e9da"
            ]
        ]
    },
    {
        "id": "de563346f705b37f",
        "type": "debug",
        "z": "1c01547a0468f5c0",
        "name": "Thread lancé",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 930,
        "y": 40,
        "wires": []
    },
    {
        "id": "8202072c5c42e9da",
        "type": "debug",
        "z": "1c01547a0468f5c0",
        "name": "Erreur",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 910,
        "y": 80,
        "wires": []
    },
    {
        "id": "mqtt_in",
        "type": "mqtt in",
        "z": "1c01547a0468f5c0",
        "name": "Réponse du serveur",
        "topic": "server/log",
        "qos": "0",
        "datatype": "json",
        "broker": "ba7648b8.35c9f8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 220,
        "wires": [
            [
                "function_process_state",
                "37478c959577533d"
            ]
        ]
    },
    {
        "id": "function_process_state",
        "type": "function",
        "z": "1c01547a0468f5c0",
        "name": "Process State",
        "func": "var payload = msg.payload;\n\n// Vérifier que les informations nécessaires sont présentes dans le message\nif (!payload || !payload.pipeline_name || !payload.state) {\n    node.error(\"Message MQTT invalide: \" + JSON.stringify(payload));\n    return null;\n}\n\n// Initialiser ou récupérer le tableau des états des pipelines (taille fixe de 6 éléments)\nvar pipelinesStates = flow.get('pipelinesStates') || Array(6).fill(null);  // Tableau avec 6 éléments vides\n\n// Identifier l'index de pipeline_name (par exemple: pipeline1 correspond à index 0, pipeline2 à index 1, etc.)\nvar index = parseInt(payload.pipeline_name.replace('pipeline', '')) - 1;\n\n// Si l'index est valide (entre 0 et 5), on met à jour l'état du pipeline correspondant\nif (index >= 0 && index < 6) {\n    pipelinesStates[index] = {\n        label: payload.pipeline_name,\n        state: payload.state,\n        timestamp: new Date().toLocaleString()\n    };\n} else {\n    node.error(\"Nom de pipeline invalide: \" + payload.pipeline_name);\n    return null;\n}\n\n// Sauvegarder le tableau mis à jour dans le flow\nflow.set('pipelinesStates', pipelinesStates);\n\n// Passer le tableau mis à jour au message pour l'utiliser dans les UI ou autres nœuds\nmsg.payload = pipelinesStates;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "ui_text_pipeline1",
                "ui_text_pipeline2",
                "ui_text_pipeline3",
                "ui_text_pipeline4",
                "ui_text_pipeline5",
                "ui_text_pipeline6"
            ]
        ]
    },
    {
        "id": "ui_text_pipeline1",
        "type": "ui_text",
        "z": "1c01547a0468f5c0",
        "group": "bbd3e3f3bc9b",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Pipeline1",
        "label": "Pipe L1",
        "format": "{{msg.payload[0].timestamp}} - {{msg.payload[0].state}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#1a5fb4",
        "x": 700,
        "y": 140,
        "wires": []
    },
    {
        "id": "ui_text_pipeline2",
        "type": "ui_text",
        "z": "1c01547a0468f5c0",
        "group": "bbd3e3f3bc9b",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Pipeline 2",
        "label": "Pipe L2",
        "format": "{{msg.payload[1].timestamp}} - {{msg.payload[1].state}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "16",
        "color": "#1a5fb4",
        "x": 700,
        "y": 180,
        "wires": []
    },
    {
        "id": "ui_text_pipeline3",
        "type": "ui_text",
        "z": "1c01547a0468f5c0",
        "group": "bbd3e3f3bc9b",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "Pipeline 3",
        "label": "Pipe L3",
        "format": "{{msg.payload[2].timestamp}} - {{msg.payload[2].state}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#1a5fb4",
        "x": 700,
        "y": 220,
        "wires": []
    },
    {
        "id": "ui_text_pipeline4",
        "type": "ui_text",
        "z": "1c01547a0468f5c0",
        "group": "bbd3e3f3bc9b",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "Pipeline 4",
        "label": "Pipe L4",
        "format": "{{msg.payload[3].timestamp}} - {{msg.payload[3].state}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#1a5fb4",
        "x": 700,
        "y": 260,
        "wires": []
    },
    {
        "id": "ui_text_pipeline5",
        "type": "ui_text",
        "z": "1c01547a0468f5c0",
        "group": "bbd3e3f3bc9b",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "Pipeline 5",
        "label": "Pipe L5",
        "format": "{{msg.payload[4].timestamp}} - {{msg.payload[4].state}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#1a5fb4",
        "x": 700,
        "y": 300,
        "wires": []
    },
    {
        "id": "ui_text_pipeline6",
        "type": "ui_text",
        "z": "1c01547a0468f5c0",
        "group": "bbd3e3f3bc9b",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "Pipeline 6",
        "label": "Pipe L6",
        "format": "{{msg.payload[5].timestamp}} - {{msg.payload[5].state}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#1a5fb4",
        "x": 700,
        "y": 340,
        "wires": []
    },
    {
        "id": "bbd3e3f3bc9b",
        "type": "ui_group",
        "name": "Execute",
        "tab": "a5f6c3d7b9e4",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ba7648b8.35c9f8",
        "type": "mqtt-broker",
        "name": "MQTT Local",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "a5f6c3d7b9e4",
        "type": "ui_tab",
        "name": "Execution",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    }
]