# V1.0 Programme permettant √† partir d'un flux RTSP d'enregistrer des vid√©os √† la demande 
# en fonction des commandes MQTT re√ßue.
from pygstc.gstc import *
from pygstc.logger import *
import paho.mqtt.client as mqtt
import os

# Configurations MQTT
MQTT_BROKER = "localhost"  # Remplace par ton broker MQTT
MQTT_TOPIC = "gstreamer/control"  # Le topic auquel tu t'abonnes
MQTT_PORT = 1883

# Configuration du pipeline dans gstd
#pipeline_str = "rtspsrc location=rtsp://admin:JKFLFO@172.24.1.112/11 latency=100 ! watchdog timeout=200 ! queue ! rtph264depay ! h264parse ! queue ! h264parse ! splitmuxsink location=video%02d.mov max-size-time=10000000000 max-size-bytes=1000000"

pipeline_name_record = "RECORD_VideoSalon"
pipiline_name_display = "DISPLAY_VideoSalon"

export_directory_file = "/home/bibi/code/ECHO-PROJECT/TEST_VIDEOS/Bassin_A/"
camera_location = "rtsp://admin:JKFLFO@172.24.1.112/11"

# V√©rifier et cr√©er le r√©pertoire de destination (export_directory_file) si n√©cessaire
if not os.path.exists(export_directory_file):
    os.makedirs(export_directory_file)
    print(f"üìÅ R√©pertoire cr√©√© : {export_directory_file}")
else:
    print(f"üìÇ R√©pertoire d√©j√† existant : {export_directory_file}")

pipeline_display = "rtspsrc location=rtsp://admin:JKFLFO@172.24.1.112/11 latency=1000 ! queue ! rtph264depay ! h264parse ! avdec_h264 ! queue ! videoconvert ! fpsdisplaysink sync=false"
pipeline_record = f"rtspsrc location={camera_location} latency=1000 ! queue ! rtph264depay ! h264parse ! queue ! h264parse ! splitmuxsink location={export_directory_file}video%02d.mov max-size-time=10000000000 max-size-bytes=1000000"

# Cr√©ation du client gstd
gstd_logger = CustomLogger('pygstc_example', loglevel='DEBUG')
gstd_client = GstdClient(logger=gstd_logger)

# Cr√©ation du pipeline Display
# gstd_client.pipeline_create(pipiline_name_display, pipeline_display)
# print(f"‚úÖ Pipeline {pipeline_name_record} cr√©√© avec succ√®s")
# pipelines = gstd_client.read("pipelines")
# print(f"üìú Liste des pipelines actifs : {pipelines}")

# # Cr√©ation du pipeline Record
# gstd_client.pipeline_create(pipeline_name_record, pipeline_record)
# print(f"‚úÖ Pipeline {pipeline_name_record} cr√©√© avec succ√®s")
# pipelines = gstd_client.read("pipelines")
# print(f"üìú Liste des pipelines actifs : {pipelines}")

# Callback : Connexion au broker MQTT
def on_connect(client, userdata, flags, rc):
    print("üì° Connect√© au broker MQTT")
    client.subscribe(MQTT_TOPIC)

# Callback : R√©ception d'un message MQTT
def on_message(client, userdata, msg):
    try:
        #command = msg.payload.decode()
        payload = json.loads(msg.payload.decode())
        command = payload.get("order")
        camera_ID = payload.get("camera_ID")
        print(f"üì© Commande MQTT re√ßue : {command} / camera_ID : {camera_ID}")

        if command == "create_pipeline":
            # Recup√©ration des parametres de cr√©ation 
            pipe_Name = payload.get("pipeline_name")
            pipe_Location = payload.get("location")

            print(f"‚ñ∂Ô∏è Creation du pipeline : {pipe_Name} / location : {pipe_Location} ")
            # Cr√©ation du pipeline
            pipe_Record = f"rtspsrc location={pipe_Location} latency=1000 ! queue ! rtph264depay ! h264parse ! queue ! h264parse ! splitmuxsink location={export_directory_file}{pipe_Name}%02d.mov max-size-time=10000000000 max-size-bytes=1000000"
            try:
                gstd_client.pipeline_create(pipe_Name, pipe_Record)
                print(f"‚úÖ Pipeline {pipe_Name} cr√©√© avec succ√®s")
            except(e):
                print(f"Error on Pipeline {pipe_Name} Error : {e}")

        elif command == "start":
            pipe_Name = payload.get("pipeline_name")
            print(f"‚ñ∂Ô∏è D√©marrage du pipeline : {pipe_Name}")
            gstd_client.pipeline_play(pipe_Name)
            # V√©rifier l'√©tat du pipeline
            state = gstd_client.read(f'pipelines/{pipe_Name}/state')
            print(f"üö¶ √âtat du pipeline apr√®s start : {state}")

        elif command == "pause":
            pipe_Name = payload.get("pipeline_name")
            print(f"‚è∏Ô∏è Pause du pipeline : {pipe_Name}")
            gstd_client.pipeline_pause(pipe_Name)

        elif command == "resume":
            pipe_Name = payload.get("pipeline_name")
            print(f"‚ñ∂Ô∏è Reprise du pipeline : {pipe_Name}")
            gstd_client.pipeline_play(pipe_Name)

        elif command == "stop":
            pipe_Name = payload.get("pipeline_name")
            print(f"üõë Arr√™t du pipeline : {pipe_Name}")
            gstd_client.pipeline_stop(pipe_Name)

        elif command == "status_record":
            print(gstd_client.read(f'pipelines/{pipe_Name}/state')['value'])

        elif command == "start_display":
            gstd_client.pipeline_play(pipiline_name_display)

        elif command == "pause_display":
            gstd_client.pipeline_pause(pipiline_name_display)

        elif command == "stop_display":
            gstd_client.pipeline_stop(pipiline_name_display)
    
    except json.JSONDecodeError as e:
        print(f"Erreur lors du parsing du JSON: {e}")

# Connexion MQTT
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect(MQTT_BROKER, MQTT_PORT, 60)

try:
    # Boucle infinie pour recevoir les messages MQTT
    client.loop_forever()

except KeyboardInterrupt:
    print("\nüî¥ Arr√™t du programme.")
    gstd_client.pipeline_stop(pipeline_name_record)
    gstd_client.pipeline_delete(pipeline_name_record)
    gstd_client.pipeline_stop(pipiline_name_display)
    gstd_client.pipeline_delete(pipiline_name_display)